#include<iostream>
using namespace std;
class node{
        public:
                int data;
                node * next;

                node(int val)
                {
                        data = val;
                        next = nullptr;
                }
};
class ll{
        public:
                node * head = nullptr;
                node * temp = nullptr;

                void insert_back(int val)
                {
                        node * newnode = new node(val);
                        if(head == nullptr)
                                head = temp = newnode;
                        else if(temp->next== nullptr)
                        {
                                temp->next = newnode;
                        }
                        else
                        {
                                while(temp->next!=nullptr)
                                {
                                        temp = temp->next;

                                }
                                temp->next =newnode;
                        }


                }
                void insert_front(int val)
                {
                        node *newnode = new node(val);
                        if(head ==nullptr)
                        {
                                head = temp = newnode;

                        }
                        else{
                        newnode->next = head;
                        head = newnode;
                        }
                }

                void insert_pos(int val , int pos)
                {
                        if(pos ==0){
                                insert_front(val);
                                return;}
                        else{
                        node *temp1 = head;
                        node * newnode = new node(val);
                        int i =0;
                        while(i < pos-1 && temp1!=nullptr)
                        {
                                temp1 = temp1->next;
                                i++;
                        }
                        if(temp1 == nullptr)
                        cout<<"Invalid position is given"<<endl;
                        else{
                        newnode->next = temp1->next;
                        temp1->next = newnode;
                        }
                        }

                }
                void delete_front()
                {
                        if(head ==nullptr)
                                cout<<"The linked list is Empty"<<endl;
                        else{
                        node * temp1 = head;
                        head = head->next;
                        delete temp1;
                        cout<<"The node is deleted"<<endl;
                        }
                }
                void delete_back()
                {
                        if(head == nullptr)
                                cout<<"The linked list is empty"<<endl;
                        else{
                        node *temp1=  head;
                        while(temp1->next->next !=nullptr)
                        {
                                temp1 = temp1->next;
                        }
                        delete temp1->next;
                        temp1->next=nullptr;
                        cout<<"The node is deleted"<<endl;
                        }
                }
                void delete_pos(int pos)
                {
                        int i= 0;
                        node* temp1 =head;
                        if(pos==0)
                                delete_front();
                        else{
                                while(i < pos-1 && temp1!=nullptr)
                                {
                                        temp1 = temp1->next;
                                        i++;
                                }
                                if(temp1==nullptr || temp1->next == nullptr)
                                {
                                        cout<<"position out of bound"<<endl;
                                        return;
                                }
                                node *temp2 = temp1->next;
                                temp1->next =temp2->next;
                               delete temp2;
                                cout<<"The node is deleted"<<endl;

                        }
                }



                void display()
                {
                        node * temp1 = head;
                        while(temp1!=nullptr)
                        {
                                cout<<temp1->data<<" ";
                                temp1= temp1->next;
                        }
                        cout<<endl;
                }


};
int main()
{
        ll list;
        int n;
        cout<<"Enter how many number";
        cin>>n;
        int a;
        for(int i=0; i < n; i++)
        {
                cout<<"enter the "<<i+1 <<"value:";
                cin>>a;
                list.insert_back(a);
        }
        int choice;
        do{
                cout<<"1.insert_back"<<endl;
                cout<<"2.insert_front"<<endl;
                cout<<"3.insert_pos"<<endl;
                cout<<"4.delete_front"<<endl;
                cout<<"5.delete_back"<<endl;
                cout<<"6.delete_pos"<<endl;
                cout<<"7.display"<<endl;
                cout<<"0.exit"<<endl;
                cout<<"Enter your choice: ";
                cin>>choice;
                switch(choice)
                {
                        case 1:
                                int num;
                                cout<<"Enter a number:";
                                cin>>num;
                                list.insert_back(num);
                                break;
                        case 2:
                                int num2;
                                cout<<"enter a number:";
                                cin>>num2;
                                list.insert_front(num2);
                                break;
                        case 3:
                                int num1 , pos;
                                cout<<"enter the value:";
                                cin>>num1;
                                cout<<"enter the position:";
                                cin>>pos;
                                list.insert_pos(num1,pos);
                                break;
                        case 4:
                                list.delete_front();
                                break;
                        case 5:
                                list.delete_back();
                                break;
                        case 6:
                                int pos1;
                                cout<<"Enter the position:";
                                cin>>pos1;
                                list.delete_pos(pos1);
                                break;
                        case 7:
                                list.display();
                                break;
                        case 0:
                                break;
                        default:
                                break;
                }


                }while(choice!=0);
}
